convertUnicode: asm conversionLabels: convLabels"input:- EAX  32-bit unicode value to convert.output:- EAX - utf-8 encoded character (in little-endian byte order) max 4 bytes- EDX - number of encoded bytes"	|  moreThanTwo moreThanThree |		moreThanTwo := asm uniqueLabelName: 'moreThanTwo'.	moreThanThree := asm uniqueLabelName: 'moreThanThree'.		asm		cmp:  asm EAX with: 16r7F;		jle: (convLabels at: 1); "one byte"		cmp: asm EAX with: 16r7FF;	 	jg: moreThanTwo;"two bytes 80 .. 7FF"" 	AH 			AL 	      ""00000aaa aabbbbbb"	"110aaaaa 10bbbbbb	AL                      AH   (little endian order)"		shr: asm EAX with: 2;		shl: asm AL with: 2;		or: asm AX with: 2r1100000010000000;		xchg: asm AL with: asm AH;		jmp: (convLabels at: 2);	label: moreThanTwo;		cmp: asm EAX with: 16rFFFF;	 	jg: moreThanThree;"three bytes 800 ... FFFF"	" 	AH 			AL 	      ""aaaabbbb bbcccccc"" => 1110aaaa 10bbbbbb 10cccccc"		shl: asm EAX with: 4;		shr: asm AX with: 2;		shr: asm AL with: 2;	" EAX = ...aaaa xxbbbbbb xxcccccc "		or: asm EAX with: 2r111000001000000010000000;  "16rE08080"			shl: asm EAX with: 8;		bswap: asm EAX;		jmp: (convLabels at: 3);"four bytes 1000 ... 10FFFF"	" 	AH 			AL 	      ""000aaabb bbbbcccc ccdddddd""=> 11110aaa 10bbbbbb 10cccccc 10dddddd"				mov: asm EAX to: asm EDX;		shl: asm EAX with: 4;		shr: asm AX with: 2;		shr: asm AL with: 2;	" EAX = 0000000a aabbbbbb xxcccccc xxdddddd "		and: asm EAX with: 16r3F3F3F;		or: asm EAX with: 16r808080;		bswap: asm EAX;		shr: asm EDX with: 18; "6*3"		or: asm DL with: 16r11110000;		mov: asm DL to: asm AL;		jmp: (convLabels at: 4)